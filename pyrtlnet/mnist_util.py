import tensorflow as tf


def _resize_images(images, new_size):
    """Resize images to `new_size`."""
    images = tf.constant(images)
    images = images[..., tf.newaxis]
    images = tf.image.resize(images, new_size)[..., 0].numpy()
    return images


def _preprocess_images(images):
    """Resize images from 28×28 to 12×12.

    Reducing image size significantly reduces the amount of hardware generated by
    pyrtl_inference.py, which reduces simulation times.

    """
    assert len(images) > 0
    assert images[0].shape == (28, 28)

    # Normalize images.
    return _resize_images(images, new_size=(12, 12))


def load_mnist_images() -> tuple[
    tuple[tf.Tensor, tf.Tensor], tuple[tf.Tensor, tf.Tensor]
]:
    """Load the MNIST data set and resize images from 28×28 to 12×12.

    :returns: ``(train_images, train_labels), (test_images, test_labels)``.

    """
    # Load MNIST dataset.
    mnist = tf.keras.datasets.mnist
    (train_images, train_labels), (test_images, test_labels) = mnist.load_data()

    # Normalize images from [0, 255] to [0.0, 1.0] and resize images from 28×28 to
    # 12×12.
    train_images = _preprocess_images(train_images / 255.0)
    test_images = _preprocess_images(test_images / 255.0)

    return (train_images, train_labels), (test_images, test_labels)
